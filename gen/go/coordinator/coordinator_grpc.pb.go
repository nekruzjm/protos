// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: coordinator/coordinator.proto

package coordinator_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Coordinator_Prepare_FullMethodName   = "/coordinator.Coordinator/Prepare"
	Coordinator_Commit_FullMethodName    = "/coordinator.Coordinator/Commit"
	Coordinator_PreCommit_FullMethodName = "/coordinator.Coordinator/PreCommit"
	Coordinator_DoCommit_FullMethodName  = "/coordinator.Coordinator/DoCommit"
)

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	Commit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error)
	PreCommit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error)
	DoCommit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) Prepare(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, Coordinator_Prepare_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Commit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Coordinator_Commit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) PreCommit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Coordinator_PreCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) DoCommit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Coordinator_DoCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility.
type CoordinatorServer interface {
	Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error)
	Commit(context.Context, *TxRequest) (*Ack, error)
	PreCommit(context.Context, *TxRequest) (*Ack, error)
	DoCommit(context.Context, *TxRequest) (*Ack, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoordinatorServer struct{}

func (UnimplementedCoordinatorServer) Prepare(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedCoordinatorServer) Commit(context.Context, *TxRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedCoordinatorServer) PreCommit(context.Context, *TxRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreCommit not implemented")
}
func (UnimplementedCoordinatorServer) DoCommit(context.Context, *TxRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommit not implemented")
}
func (UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}
func (UnimplementedCoordinatorServer) testEmbeddedByValue()                     {}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	// If the following call pancis, it indicates UnimplementedCoordinatorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_Prepare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Prepare(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_Commit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Commit(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_PreCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).PreCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_PreCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).PreCommit(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_DoCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).DoCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coordinator_DoCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).DoCommit(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prepare",
			Handler:    _Coordinator_Prepare_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _Coordinator_Commit_Handler,
		},
		{
			MethodName: "PreCommit",
			Handler:    _Coordinator_PreCommit_Handler,
		},
		{
			MethodName: "DoCommit",
			Handler:    _Coordinator_DoCommit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator/coordinator.proto",
}

const (
	Participant_CanCommit_FullMethodName = "/coordinator.Participant/CanCommit"
	Participant_DoCommit_FullMethodName  = "/coordinator.Participant/DoCommit"
	Participant_DoAbort_FullMethodName   = "/coordinator.Participant/DoAbort"
)

// ParticipantClient is the client API for Participant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParticipantClient interface {
	CanCommit(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error)
	DoCommit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error)
	DoAbort(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error)
}

type participantClient struct {
	cc grpc.ClientConnInterface
}

func NewParticipantClient(cc grpc.ClientConnInterface) ParticipantClient {
	return &participantClient{cc}
}

func (c *participantClient) CanCommit(ctx context.Context, in *PrepareRequest, opts ...grpc.CallOption) (*PrepareResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareResponse)
	err := c.cc.Invoke(ctx, Participant_CanCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantClient) DoCommit(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Participant_DoCommit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *participantClient) DoAbort(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Participant_DoAbort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParticipantServer is the server API for Participant service.
// All implementations must embed UnimplementedParticipantServer
// for forward compatibility.
type ParticipantServer interface {
	CanCommit(context.Context, *PrepareRequest) (*PrepareResponse, error)
	DoCommit(context.Context, *TxRequest) (*Ack, error)
	DoAbort(context.Context, *TxRequest) (*Ack, error)
	mustEmbedUnimplementedParticipantServer()
}

// UnimplementedParticipantServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParticipantServer struct{}

func (UnimplementedParticipantServer) CanCommit(context.Context, *PrepareRequest) (*PrepareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanCommit not implemented")
}
func (UnimplementedParticipantServer) DoCommit(context.Context, *TxRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoCommit not implemented")
}
func (UnimplementedParticipantServer) DoAbort(context.Context, *TxRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoAbort not implemented")
}
func (UnimplementedParticipantServer) mustEmbedUnimplementedParticipantServer() {}
func (UnimplementedParticipantServer) testEmbeddedByValue()                     {}

// UnsafeParticipantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParticipantServer will
// result in compilation errors.
type UnsafeParticipantServer interface {
	mustEmbedUnimplementedParticipantServer()
}

func RegisterParticipantServer(s grpc.ServiceRegistrar, srv ParticipantServer) {
	// If the following call pancis, it indicates UnimplementedParticipantServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Participant_ServiceDesc, srv)
}

func _Participant_CanCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServer).CanCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Participant_CanCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServer).CanCommit(ctx, req.(*PrepareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Participant_DoCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServer).DoCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Participant_DoCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServer).DoCommit(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Participant_DoAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParticipantServer).DoAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Participant_DoAbort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParticipantServer).DoAbort(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Participant_ServiceDesc is the grpc.ServiceDesc for Participant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Participant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coordinator.Participant",
	HandlerType: (*ParticipantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CanCommit",
			Handler:    _Participant_CanCommit_Handler,
		},
		{
			MethodName: "DoCommit",
			Handler:    _Participant_DoCommit_Handler,
		},
		{
			MethodName: "DoAbort",
			Handler:    _Participant_DoAbort_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator/coordinator.proto",
}
